{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","finished","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","hasOwnProperty","toDoText","textDecorationLine","Alert","alert","finishToDo","Fontisto","name","size","Platform","OS","confirm","deleteToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.2147b929.chunk.js","sourcesContent":["export const theme = {\r\n    bg: \"black\",\r\n    grey: \"#3A3D40\",\r\n    toDoBg: \"#1A1C20\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Platform,\n    StyleSheet,\n    Text,\n    View,\n    TouchableOpacity,\n    TextInput,\n    Alert,\n    ScrollView,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./color\";\n\nconst STORAGE_KEY = \"@toDos\";\nexport default function App() {\n    const [working, setWorking] = useState(true);\n    const [finished, setFinished] = useState(true);\n    const [text, setText] = useState(\"\");\n    const [toDos, setToDos] = useState({});\n    useEffect(() => {\n        loadToDos();\n    }, []);\n    const travel = () => setWorking(false);\n    const work = () => setWorking(true);\n    const onChangeText = (payload) => setText(payload);\n    const saveToDos = async (toSave) => {\n        await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    };\n    const loadToDos = async () => {\n        const s = await AsyncStorage.getItem(STORAGE_KEY);\n        setToDos(JSON.parse(s));\n    };\n\n    const addToDo = async () => {\n        if (text === \"\") {\n            return;\n        }\n        const newToDos = {\n            ...toDos,\n            [Date.now()]: { text, working, finished },\n        };\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n        setText(\"\");\n    };\n    const deleteToDo = (key) => {\n        if (Platform.OS === \"web\") {\n            const ok = confirm(\"Delete To Do\");\n            if (ok) {\n                const newToDos = { ...toDos };\n                delete newToDos[key];\n                setToDos(newToDos);\n                saveToDos(newToDos);\n            }\n        } else {\n            Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n                { text: \"Cancel\" },\n                {\n                    text: \"I'm Sure\",\n                    style: \"destructive\",\n                    onPress: () => {\n                        const newToDos = { ...toDos };\n                        delete newToDos[key];\n                        setToDos(newToDos);\n                        saveToDos(newToDos);\n                    },\n                },\n            ]);\n        }\n    };\n    const finishToDo = (key) => {\n        Alert.alert(\"Finish To Do\", \"Are you sure?\", [\n            { text: \"Cancel\" },\n            {\n                text: \"I'm Sure\",\n                onPress: () => {\n                    const newToDos = { ...toDos };\n                    delete newToDos[key].finished;\n                    setToDos(newToDos);\n                    saveToDos(newToDos);\n                },\n            },\n        ]);\n    };\n\n    return (\n        <View style={styles.container}>\n            <StatusBar style=\"auto\" />\n            <View style={styles.header}>\n                <TouchableOpacity onPress={work}>\n                    <Text\n                        style={{\n                            ...styles.btnText,\n                            color: working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Work\n                    </Text>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={travel}>\n                    <Text\n                        style={{\n                            ...styles.btnText,\n                            color: !working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Travel\n                    </Text>\n                </TouchableOpacity>\n            </View>\n            <TextInput\n                onSubmitEditing={addToDo}\n                onChangeText={onChangeText}\n                returnKeyType=\"done\"\n                value={text}\n                placeholder={working ? \"할 일은?\" : \"어디 가고 싶나요\"}\n                style={styles.input}\n            />\n            <ScrollView>\n                {Object.keys(toDos).map((key) =>\n                    toDos[key].working === working ? (\n                        <View style={styles.toDo} key={key}>\n                            {toDos[key].hasOwnProperty(\"finished\") ? (\n                                <Text style={styles.toDoText}>\n                                    {toDos[key].text}\n                                </Text>\n                            ) : (\n                                <Text\n                                    style={{\n                                        ...styles.toDoText,\n                                        textDecorationLine: \"line-through\",\n                                    }}\n                                >\n                                    {toDos[key].text}\n                                </Text>\n                            )}\n                            <TouchableOpacity onPress={() => finishToDo(key)}>\n                                <Fontisto\n                                    name=\"spinner-refresh\"\n                                    size={24}\n                                    color=\"black\"\n                                />\n                            </TouchableOpacity>\n                            <TouchableOpacity onPress={() => deleteToDo(key)}>\n                                <Fontisto\n                                    name=\"trash\"\n                                    size={18}\n                                    color={theme.grey}\n                                />\n                            </TouchableOpacity>\n                        </View>\n                    ) : null\n                )}\n            </ScrollView>\n        </View>\n    );\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: theme.bg,\n        paddingHorizontal: 20,\n    },\n    header: {\n        justifyContent: \"space-between\",\n        flexDirection: \"row\",\n        marginTop: 100,\n    },\n    btnText: {\n        fontSize: 38,\n        fontWeight: \"600\",\n    },\n    input: {\n        backgroundColor: \"white\",\n        paddingVertical: 15,\n        paddingHorizontal: 20,\n        borderRadius: 30,\n        marginVertical: 20,\n        fontSize: 18,\n    },\n    toDo: {\n        backgroundColor: theme.toDoBg,\n        marginBottom: 10,\n        paddingVertical: 20,\n        paddingHorizontal: 20,\n        borderRadius: 15,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n    },\n    toDoText: {\n        color: \"white\",\n        fontSize: 16,\n        fontWeight: \"600\",\n    },\n});\n"],"sourceRoot":""}